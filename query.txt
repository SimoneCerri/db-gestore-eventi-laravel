Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)
    - SELECT * FROM events WHERE price IS null (19)

Selezionare tutte le location in ordine alfabetico (82)
    - SELECT * FROM locations ORDER BY name ASC (82)

Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)
    - SELECT * FROM events WHERE price < 20 AND duration < '03:00:00' (38)
        [ricordati gli apici]

Selezionare tutti gli eventi di dicembre 2023 (25)
    - SELECT * FROM events WHERE start LIKE '2023-12%' (25)
        [% per tagliare fino a quel punto]

Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)
    - SELECT * FROM events WHERE duration > '02:00:00' (946)

Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e
durata totale (1040)
    - SELECT name,DATE(start) AS date_start, TIME(start) AS time_start, ADDTIME(TIME(start),duration) AS time_end,duration FROM events (1040)
        [ADDTIME per sommare, DATE(preleva solo data), TIME(preleva solo time)]

Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)
    - SELECT * FROM events WHERE user_id = 1202 (132)

Selezionare il numero totale di eventi per ogni fascia di prezzo (81)
    - ??

Selezionare tutti gli utenti admin ed editor (9)
    - SELECT * FROM users WHERE role_id IN (1,2) (9)

Selezionare tutti i concerti (eventi con il tag “concerti”) (72)
    - SELECT * FROM event_tag WHERE tag_id = 1 (72)

Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)
    - ??

Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di
esse (82)
    - SELECT locations.name AS location_name, COUNT(events.id) AS event_count FROM locations LEFT JOIN events ON locations.id = events.location_id GROUP BY locations.id (82)

Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug:
concerto-classico-serale, id: 34) (30)
    - SELECT bookings.id FROM bookings WHERE bookings.event_id = 34 (30)

Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug:
festival-jazz-estivo, id: 2) specificando nome e cognome (13)
    - SELECT users.first_name, users.last_name FROM bookings JOIN users ON bookings.user_id = users.id WHERE bookings.event_id = 2 (13)

Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
biglietti totali per l’evento) (18)
    - SELECT events.id,events.name,events.total_tickets FROM events JOIN bookings ON bookings.event_id = events.id GROUP BY events.id HAVING COUNT(bookings.id) = events.total_tickets (18)
        [events.total_tickets necessario nel SELECT e GROUP BY obbligatorio]

Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)
    - SELECT locations.name, COUNT(events.id) AS event_counter FROM locations JOIN events ON locations.id = events.location_id GROUP BY locations.id ORDER BY event_counter DESC (82)

Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)
    - SELECT users.first_name, users.last_name, COUNT(bookings.user_id) AS num_bookings FROM users JOIN bookings ON bookings.user_id = users.id GROUP BY users.id HAVING num_bookings > 70 (74)
        [ricordati GROUP BY altrimenti si rompe]

Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)
    - SELECT events.name, locations.name,COUNT(bookings.id) AS selled_tickets,events.total_tickets - COUNT(bookings.id) AS avaiable_tickets FROM events JOIN bookings ON bookings.event_id = events.id JOIN locations ON locations.id = events.location_id GROUP BY events.id (0 - -1)